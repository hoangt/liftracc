diff -ru old/Makefile.LINUX new/Makefile.LINUX
--- old/Makefile.LINUX	1999-03-15 21:10:52.000000000 +0100
+++ new/Makefile.LINUX	2010-08-19 14:23:29.000000000 +0200
@@ -22,25 +22,26 @@
 # Libraries and includs
 #-----------------------------------------------------------------------------
  
-BLLIB = libblas.a
-CBDIR = $(HOME)/CBLAS
-CBLIBDIR = $(CBDIR)/lib/$(PLAT)
-CBLIB = $(CBLIBDIR)/cblas_$(PLAT).a
+BLLIB = ../../BLAS/libblas.a
+CBDIR = ..
+CBLIBDIR = $(CBDIR)
+CBLIB = $(CBLIBDIR)/libcblas_inner.a
+CBLIBSO = $(CBLIBDIR)/libcblas_inner.so
 
 #-----------------------------------------------------------------------------
 # Compilers
 #-----------------------------------------------------------------------------
 
 CC = gcc
-FC = g77
+FC = gfortran
 LOADER = $(FC)
 
 #-----------------------------------------------------------------------------
 # Flags for Compilers
 #-----------------------------------------------------------------------------
 
-CFLAGS = -O3 -DADD_
-FFLAGS = -O3  
+CFLAGS = -O3 -fPIC -DADD_
+FFLAGS = -O3 -fPIC
 
 #-----------------------------------------------------------------------------
 # Archive programs and flags
diff -ru old/src/cblas_caxpy.c new/src/cblas_caxpy.c
--- old/src/cblas_caxpy.c	1999-03-13 04:43:42.000000000 +0100
+++ new/src/cblas_caxpy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_caxpy( const int N, const void *alpha, const void *X,
+void inner_cblas_caxpy( const int N, const void *alpha, const void *X,
                        const int incX, void *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_ccopy.c new/src/cblas_ccopy.c
--- old/src/cblas_ccopy.c	1999-03-13 04:43:42.000000000 +0100
+++ new/src/cblas_ccopy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ccopy( const int N, const void *X,
+void inner_cblas_ccopy( const int N, const void *X,
                       const int incX, void *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_cdotc_sub.c new/src/cblas_cdotc_sub.c
--- old/src/cblas_cdotc_sub.c	1999-03-13 04:43:43.000000000 +0100
+++ new/src/cblas_cdotc_sub.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cdotc_sub( const int N, const void *X, const int incX,
+void inner_cblas_cdotc_sub( const int N, const void *X, const int incX,
                     const void *Y, const int incY,void *dotc)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_cdotu_sub.c new/src/cblas_cdotu_sub.c
--- old/src/cblas_cdotu_sub.c	1999-03-13 04:43:44.000000000 +0100
+++ new/src/cblas_cdotu_sub.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cdotu_sub( const int N, const void *X,
+void inner_cblas_cdotu_sub( const int N, const void *X,
                      const int incX, const void *Y, const int incY,void *dotu)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_cgbmv.c new/src/cblas_cgbmv.c
--- old/src/cblas_cgbmv.c	1999-03-15 21:11:04.000000000 +0100
+++ new/src/cblas_cgbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_cgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU,
                  const void *alpha, const void  *A, const int lda,
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_cgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -131,7 +131,7 @@
       }
       else 
       {
-         cblas_xerbla(2, "cblas_cgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -159,7 +159,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_cgbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_cgbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
 }
diff -ru old/src/cblas_cgemm.c new/src/cblas_cgemm.c
--- old/src/cblas_cgemm.c	1999-03-15 21:11:05.000000000 +0100
+++ new/src/cblas_cgemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const void *alpha, const void  *A,
                  const int lda, const void  *B, const int ldb,
@@ -47,7 +47,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_cgemm", "Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgemm", "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if ( TransB == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(3, "cblas_cgemm", "Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(3, "cblas_cgemm", "Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -79,7 +79,7 @@
       else if ( TransA == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(2, "cblas_cgemm", "Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgemm", "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -89,7 +89,7 @@
       else if ( TransB == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_cgemm", "Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(2, "cblas_cgemm", "Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       F77_cgemm(F77_TA, F77_TB, &F77_N, &F77_M, &F77_K, alpha, B,
                   &F77_ldb, A, &F77_lda, beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_cgemm", "Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_cgemm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_cgemv.c new/src/cblas_cgemv.c
--- old/src/cblas_cgemv.c	1999-03-15 21:11:06.000000000 +0100
+++ new/src/cblas_cgemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cgemv(const enum CBLAS_ORDER order,
+void inner_cblas_cgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
                  const void  *X, const int incX, const void *beta,
@@ -50,7 +50,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_cgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -126,7 +126,7 @@
       }
       else 
       {
-         cblas_xerbla(2, "cblas_cgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_cgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -155,7 +155,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_cgemv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_cgemv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_cgerc.c new/src/cblas_cgerc.c
--- old/src/cblas_cgerc.c	1999-03-15 21:11:07.000000000 +0100
+++ new/src/cblas_cgerc.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cgerc(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_cgerc(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -77,7 +77,7 @@
       if(Y!=y)
          free(y);
 
-   } else cblas_xerbla(1, "cblas_cgerc", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_cgerc", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_cgeru.c new/src/cblas_cgeru.c
--- old/src/cblas_cgeru.c	1999-03-15 21:11:08.000000000 +0100
+++ new/src/cblas_cgeru.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cgeru(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_cgeru(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -38,7 +38,7 @@
       F77_cgeru( &F77_N, &F77_M, alpha, Y, &F77_incY, X, &F77_incX, A, 
                       &F77_lda);
    }
-   else cblas_xerbla(1, "cblas_cgeru","Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_cgeru","Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_chbmv.c new/src/cblas_chbmv.c
--- old/src/cblas_chbmv.c	1999-03-15 21:11:09.000000000 +0100
+++ new/src/cblas_chbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include "cblas_f77.h"
 #include <stdio.h>
 #include <stdlib.h>
-void cblas_chbmv(const enum CBLAS_ORDER order,
+void inner_cblas_chbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo,const int N,const int K,
                  const void *alpha, const void  *A, const int lda,
                  const void  *X, const int incX, const void *beta,
@@ -46,7 +46,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chbmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_chbmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -120,7 +120,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_chbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -133,7 +133,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_chbmv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_chbmv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_chemm.c new/src/cblas_chemm.c
--- old/src/cblas_chemm.c	1999-03-15 21:11:10.000000000 +0100
+++ new/src/cblas_chemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_chemm(const enum CBLAS_ORDER Order, const  enum CBLAS_SIDE Side,
+void inner_cblas_chemm(const enum CBLAS_ORDER Order, const  enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_chemm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_chemm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_chemm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_chemm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_chemm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_chemm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -85,7 +85,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_chemm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_chemm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       F77_chemm(F77_SD, F77_UL, &F77_N, &F77_M, alpha, A,
                  &F77_lda, B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_chemm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_chemm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_chemv.c new/src/cblas_chemv.c
--- old/src/cblas_chemv.c	1999-03-15 21:11:11.000000000 +0100
+++ new/src/cblas_chemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_chemv(const enum CBLAS_ORDER order,
+void inner_cblas_chemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *X, const int incX, const void *beta,
@@ -46,7 +46,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_chemv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_chemv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -121,7 +121,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chemv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_chemv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -134,7 +134,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_chemv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_chemv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_cher2.c new/src/cblas_cher2.c
--- old/src/cblas_cher2.c	1999-03-15 21:11:13.000000000 +0100
+++ new/src/cblas_cher2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -43,7 +43,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_cher2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_cher2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_cher2","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_cher2","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -136,7 +136,7 @@
                                       &F77_incX, A, &F77_lda);
    } else 
    {
-      cblas_xerbla(1, "cblas_cher2","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_cher2","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_cher2k.c new/src/cblas_cher2k.c
--- old/src/cblas_cher2k.c	1999-03-15 21:11:14.000000000 +0100
+++ new/src/cblas_cher2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const float beta,
@@ -49,7 +49,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_cher2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_cher2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_cher2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_cher2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(2, "cblas_cher2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_cher2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -90,7 +90,7 @@
       else if ( Trans == CblasNoTrans )   TR='C';
       else 
       {
-         cblas_xerbla(3, "cblas_cher2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_cher2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -104,7 +104,7 @@
       ALPHA[1]= -alp[1];
       F77_cher2k(F77_UL,F77_TR, &F77_N, &F77_K, ALPHA, A, &F77_lda, B, &F77_ldb, &beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_cher2k", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_cher2k", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_cher.c new/src/cblas_cher.c
--- old/src/cblas_cher.c	1999-03-15 21:11:12.000000000 +0100
+++ new/src/cblas_cher.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const void *X, const int incX
                 ,void *A, const int lda)
 {
@@ -41,7 +41,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_cher","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_cher","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_cher","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_cher","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       F77_cher(F77_UL, &F77_N, &alpha, x, &F77_incX, A, &F77_lda);
    } else 
    {
-      cblas_xerbla(1, "cblas_cher","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_cher","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_cherk.c new/src/cblas_cherk.c
--- old/src/cblas_cherk.c	1999-03-15 21:11:15.000000000 +0100
+++ new/src/cblas_cherk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const float alpha, const void *A, const int lda,
                  const float beta, void *C, const int ldc)
@@ -43,7 +43,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_cherk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_cherk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_cherk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_cherk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -74,7 +74,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_cherk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_cherk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -84,7 +84,7 @@
       else if ( Trans == CblasNoTrans )   TR='C';
       else 
       {
-         cblas_xerbla(3, "cblas_cherk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_cherk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -98,7 +98,7 @@
       F77_cherk(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda,
                 &beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_cherk", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_cherk", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_chpmv.c new/src/cblas_chpmv.c
--- old/src/cblas_chpmv.c	1999-03-15 21:11:16.000000000 +0100
+++ new/src/cblas_chpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_chpmv(const enum CBLAS_ORDER order,
+void inner_cblas_chpmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo,const int N,
                  const void *alpha, const void  *AP,
                  const void  *X, const int incX, const void *beta,
@@ -44,7 +44,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_chpmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -119,7 +119,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpmv","Illegal Uplo setting, %d\n", Uplo );
+         inner_cblas_xerbla(2, "cblas_chpmv","Illegal Uplo setting, %d\n", Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -133,7 +133,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_chpmv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_chpmv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_chpr2.c new/src/cblas_chpr2.c
--- old/src/cblas_chpr2.c	1999-03-15 21:11:18.000000000 +0100
+++ new/src/cblas_chpr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                       const int N,const void *alpha, const void *X, 
                       const int incX,const void *Y, const int incY, void *Ap)
 
@@ -43,7 +43,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_chpr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -61,7 +61,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpr2","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_chpr2","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -134,7 +134,7 @@
       F77_chpr2(F77_UL, &F77_N, alpha, y, &F77_incY, x, &F77_incX, Ap);
    } else 
    {
-      cblas_xerbla(1, "cblas_chpr2","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_chpr2","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_chpr.c new/src/cblas_chpr.c
--- old/src/cblas_chpr.c	1999-03-15 21:11:17.000000000 +0100
+++ new/src/cblas_chpr.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const void *X,
                 const int incX, void *A)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_chpr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_chpr","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_chpr","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
 
    } else 
    {
-      cblas_xerbla(1, "cblas_chpr","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_chpr","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_cscal.c new/src/cblas_cscal.c
--- old/src/cblas_cscal.c	1999-03-13 04:44:01.000000000 +0100
+++ new/src/cblas_cscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cscal( const int N, const void *alpha, void *X, 
+void inner_cblas_cscal( const int N, const void *alpha, void *X, 
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_csscal.c new/src/cblas_csscal.c
--- old/src/cblas_csscal.c	1999-03-13 04:44:02.000000000 +0100
+++ new/src/cblas_csscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_csscal( const int N, const float alpha, void *X,
+void inner_cblas_csscal( const int N, const float alpha, void *X,
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_cswap.c new/src/cblas_cswap.c
--- old/src/cblas_cswap.c	1999-03-13 04:44:03.000000000 +0100
+++ new/src/cblas_cswap.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_cswap( const int N, void *X, const int incX, void *Y,
+void inner_cblas_cswap( const int N, void *X, const int incX, void *Y,
                        const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_csymm.c new/src/cblas_csymm.c
--- old/src/cblas_csymm.c	1999-03-15 21:11:19.000000000 +0100
+++ new/src/cblas_csymm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
                  const void  *B, const int ldb, const void *beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_csymm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_csymm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_csymm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_csymm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_csymm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_csymm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -85,7 +85,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_csymm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_csymm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       F77_csymm(F77_SD, F77_UL, &F77_N, &F77_M, alpha, A, &F77_lda,
                      B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_csymm", "Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_csymm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_csyr2k.c new/src/cblas_csyr2k.c
--- old/src/cblas_csyr2k.c	1999-03-15 21:11:20.000000000 +0100
+++ new/src/cblas_csyr2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void  *A, const int lda,
                   const void  *B, const int ldb, const void *beta,
@@ -46,7 +46,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_csyr2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_csyr2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_csyr2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_csyr2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_csyr2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_csyr2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -88,7 +88,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_csyr2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_csyr2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
 
       F77_csyr2k(F77_UL, F77_TR, &F77_N, &F77_K, alpha, A, &F77_lda, B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_csyr2k", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_csyr2k", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_csyrk.c new/src/cblas_csyrk.c
--- old/src/cblas_csyrk.c	1999-03-15 21:11:21.000000000 +0100
+++ new/src/cblas_csyrk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const void *alpha, const void  *A, const int lda,
                  const void *beta, void  *C, const int ldc)
@@ -44,7 +44,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_csyrk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_csyrk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_csyrk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_csyrk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_csyrk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_csyrk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -86,7 +86,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_csyrk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_csyrk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       F77_csyrk(F77_UL, F77_TR, &F77_N, &F77_K, alpha, A, &F77_lda,
                      beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_csyrk", "Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_csyrk", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctbmv.c new/src/cblas_ctbmv.c
--- old/src/cblas_ctbmv.c	1999-03-15 21:11:22.000000000 +0100
+++ new/src/cblas_ctbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctbmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctbmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(4, "cblas_ctbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -151,7 +151,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctbsv.c new/src/cblas_ctbsv.c
--- old/src/cblas_ctbsv.c	1999-03-15 21:11:23.000000000 +0100
+++ new/src/cblas_ctbsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -118,7 +118,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -128,7 +128,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -155,7 +155,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctbsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctbsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctpmv.c new/src/cblas_ctpmv.c
--- old/src/cblas_ctpmv.c	1999-03-15 21:11:24.000000000 +0100
+++ new/src/cblas_ctpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *Ap, void  *X, const int incX)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -50,7 +50,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -110,7 +110,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -120,7 +120,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -145,7 +145,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctpmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctpmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctpsv.c new/src/cblas_ctpsv.c
--- old/src/cblas_ctpsv.c	1999-03-15 21:11:25.000000000 +0100
+++ new/src/cblas_ctpsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *Ap, void  *X, const int incX)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -50,7 +50,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -150,7 +150,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctpsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctpsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctrmm.c new/src/cblas_ctrmm.c
--- old/src/cblas_ctrmm.c	1999-03-15 21:11:26.000000000 +0100
+++ new/src/cblas_ctrmm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const  enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrmm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ctrmm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrmm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ctrmm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrmm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ctrmm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -73,7 +73,7 @@
 
       if( Diag == CblasUnit ) DI='U';
       else if ( Diag == CblasNonUnit ) DI='N';
-      else cblas_xerbla(5, "cblas_ctrmm", 
+      else inner_cblas_xerbla(5, "cblas_ctrmm", 
                        "Illegal Diag setting, %d\n", Diag);
 
       #ifdef F77_CHAR
@@ -91,7 +91,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrmm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ctrmm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrmm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ctrmm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -112,7 +112,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrmm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ctrmm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -122,7 +122,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ctrmm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ctrmm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -137,7 +137,7 @@
 
       F77_ctrmm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, alpha, A, &F77_lda, B, &F77_ldb);
    } 
-   else  cblas_xerbla(1, "cblas_ctrmm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_ctrmm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctrmv.c new/src/cblas_ctrmv.c
--- old/src/cblas_ctrmv.c	1999-03-15 21:11:27.000000000 +0100
+++ new/src/cblas_ctrmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -113,7 +113,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -123,7 +123,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -148,7 +148,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctrmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctrmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctrsm.c new/src/cblas_ctrsm.c
--- old/src/cblas_ctrsm.c	1999-03-15 21:11:28.000000000 +0100
+++ new/src/cblas_ctrsm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
@@ -46,7 +46,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ctrsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -56,7 +56,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ctrsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -67,7 +67,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ctrsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -77,7 +77,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ctrsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ctrsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ctrsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -110,7 +110,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ctrsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -121,7 +121,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ctrsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -131,7 +131,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ctrsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ctrsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -148,7 +148,7 @@
       F77_ctrsm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, alpha, A,
                 &F77_lda, B, &F77_ldb);
    } 
-   else cblas_xerbla(1, "cblas_ctrsm", "Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_ctrsm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ctrsv.c new/src/cblas_ctrsv.c
--- old/src/cblas_ctrsv.c	1999-03-15 21:11:29.000000000 +0100
+++ new/src/cblas_ctrsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *A, const int lda, void  *X,
                  const int incX)
@@ -42,7 +42,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -52,7 +52,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ctrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -61,7 +61,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -81,7 +81,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ctrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ctrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ctrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ctrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ctrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ctrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -149,7 +149,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ctrsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ctrsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dasum.c new/src/cblas_dasum.c
--- old/src/cblas_dasum.c	1999-03-13 04:44:16.000000000 +0100
+++ new/src/cblas_dasum.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double cblas_dasum( const int N, const double *X, const int incX) 
+double inner_cblas_dasum( const int N, const double *X, const int incX) 
 {
    double asum;
 #ifdef F77_INT
diff -ru old/src/cblas_daxpy.c new/src/cblas_daxpy.c
--- old/src/cblas_daxpy.c	1999-03-13 04:44:17.000000000 +0100
+++ new/src/cblas_daxpy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_daxpy( const int N, const double alpha, const double *X,
+void inner_cblas_daxpy( const int N, const double alpha, const double *X,
                        const int incX, double *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_dcopy.c new/src/cblas_dcopy.c
--- old/src/cblas_dcopy.c	1999-03-13 04:44:18.000000000 +0100
+++ new/src/cblas_dcopy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dcopy( const int N, const double *X,
+void inner_cblas_dcopy( const int N, const double *X,
                       const int incX, double *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_ddot.c new/src/cblas_ddot.c
--- old/src/cblas_ddot.c	1999-03-13 04:44:19.000000000 +0100
+++ new/src/cblas_ddot.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double cblas_ddot( const int N, const double *X,
+double inner_cblas_ddot( const int N, const double *X,
                       const int incX, const double *Y, const int incY)
 {
    double dot;
diff -ru old/src/cblas_dgbmv.c new/src/cblas_dgbmv.c
--- old/src/cblas_dgbmv.c	1999-03-15 21:11:30.000000000 +0100
+++ new/src/cblas_dgbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_dgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU,
                  const double alpha, const double  *A, const int lda,
@@ -45,7 +45,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_dgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -64,7 +64,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(2, "cblas_dgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       F77_dgbmv(F77_TA, &F77_N, &F77_M, &F77_KU, &F77_KL, &alpha, 
                      A ,&F77_lda, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_dgbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dgbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
 }
diff -ru old/src/cblas_dgemm.c new/src/cblas_dgemm.c
--- old/src/cblas_dgemm.c	1999-03-15 21:11:31.000000000 +0100
+++ new/src/cblas_dgemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const double alpha, const double  *A,
                  const int lda, const double  *B, const int ldb,
@@ -47,7 +47,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_dgemm","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgemm","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if ( TransB == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(3, "cblas_dgemm","Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(3, "cblas_dgemm","Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -79,7 +79,7 @@
       else if ( TransA == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(2, "cblas_dgemm","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgemm","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -89,7 +89,7 @@
       else if ( TransB == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_dgemm","Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(2, "cblas_dgemm","Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       F77_dgemm(F77_TA, F77_TB, &F77_N, &F77_M, &F77_K, &alpha, B,
                   &F77_ldb, A, &F77_lda, &beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_dgemm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_dgemm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dgemv.c new/src/cblas_dgemv.c
--- old/src/cblas_dgemv.c	1999-03-15 21:11:32.000000000 +0100
+++ new/src/cblas_dgemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dgemv(const enum CBLAS_ORDER order,
+void inner_cblas_dgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const double alpha, const double  *A, const int lda,
                  const double  *X, const int incX, const double beta,
@@ -41,7 +41,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_dgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(2, "cblas_dgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_dgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -71,7 +71,7 @@
       F77_dgemv(F77_TA, &F77_N, &F77_M, &alpha, A, &F77_lda, X,
                 &F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_dgemv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dgemv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dger.c new/src/cblas_dger.c
--- old/src/cblas_dger.c	1999-03-15 21:11:32.000000000 +0100
+++ new/src/cblas_dger.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dger(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_dger(const enum CBLAS_ORDER order, const int M, const int N,
                 const double alpha, const double  *X, const int incX,
                 const double  *Y, const int incY, double  *A, const int lda)
 {
@@ -40,7 +40,7 @@
                       &F77_lda);
 
    }
-   else cblas_xerbla(1, "cblas_dger", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dger", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dnrm2.c new/src/cblas_dnrm2.c
--- old/src/cblas_dnrm2.c	1999-03-13 04:44:25.000000000 +0100
+++ new/src/cblas_dnrm2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double cblas_dnrm2( const int N, const double *X, const int incX) 
+double inner_cblas_dnrm2( const int N, const double *X, const int incX) 
 {
    double nrm2;
 #ifdef F77_INT
diff -ru old/src/cblas_drot.c new/src/cblas_drot.c
--- old/src/cblas_drot.c	1999-03-13 04:44:26.000000000 +0100
+++ new/src/cblas_drot.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_drot(const int N, double *X, const int incX,
+void inner_cblas_drot(const int N, double *X, const int incX,
    double *Y, const int incY, const double c, const double s)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_drotg.c new/src/cblas_drotg.c
--- old/src/cblas_drotg.c	1999-03-11 22:45:58.000000000 +0100
+++ new/src/cblas_drotg.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_drotg(  double *a, double *b, double *c, double *s)
+void inner_cblas_drotg(  double *a, double *b, double *c, double *s)
 {
    F77_drotg(a,b,c,s);    
 }
diff -ru old/src/cblas_drotm.c new/src/cblas_drotm.c
--- old/src/cblas_drotm.c	1999-03-13 04:44:27.000000000 +0100
+++ new/src/cblas_drotm.c	2010-09-03 13:49:38.000000000 +0200
@@ -1,6 +1,6 @@
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_drotm( const int N, double *X, const int incX, double *Y, 
+void inner_cblas_drotm( const int N, double *X, const int incX, double *Y, 
                        const int incY, const double *P)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_drotmg.c new/src/cblas_drotmg.c
--- old/src/cblas_drotmg.c	1999-03-13 04:44:28.000000000 +0100
+++ new/src/cblas_drotmg.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_drotmg( double *d1, double *d2, double *b1, 
+void inner_cblas_drotmg( double *d1, double *d2, double *b1, 
                         const double b2, double *p)
 {
    F77_drotmg(d1,d2,b1,&b2,p);
diff -ru old/src/cblas_dsbmv.c new/src/cblas_dsbmv.c
--- old/src/cblas_dsbmv.c	1999-03-15 21:11:33.000000000 +0100
+++ new/src/cblas_dsbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsbmv(const enum CBLAS_ORDER order,
+void inner_cblas_dsbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N, const int K,
                  const double alpha, const double  *A, const int lda,
                  const double  *X, const int incX, const double beta,
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsbmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsbmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dsbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dsbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -70,7 +70,7 @@
       F77_dsbmv(F77_UL, &F77_N, &F77_K, &alpha, 
                      A ,&F77_lda, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_dsbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dsbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dscal.c new/src/cblas_dscal.c
--- old/src/cblas_dscal.c	1999-03-13 04:44:30.000000000 +0100
+++ new/src/cblas_dscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dscal( const int N, const double alpha, double *X, 
+void inner_cblas_dscal( const int N, const double alpha, double *X, 
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_dsdot.c new/src/cblas_dsdot.c
--- old/src/cblas_dsdot.c	1999-03-13 04:44:31.000000000 +0100
+++ new/src/cblas_dsdot.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double  cblas_dsdot( const int N, const float *X,
+double  inner_cblas_dsdot( const int N, const float *X,
                       const int incX, const float *Y, const int incY)
 {
    double dot;
diff -ru old/src/cblas_dspmv.c new/src/cblas_dspmv.c
--- old/src/cblas_dspmv.c	1999-03-15 21:11:34.000000000 +0100
+++ new/src/cblas_dspmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -10,7 +10,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dspmv(const enum CBLAS_ORDER order,
+void inner_cblas_dspmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const double alpha, const double  *AP,
                  const double  *X, const int incX, const double beta,
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dspmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dspmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dspmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dspmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       F77_dspmv(F77_UL, &F77_N, &alpha, 
                      AP, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_dspmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dspmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dspr2.c new/src/cblas_dspr2.c
--- old/src/cblas_dspr2.c	1999-03-15 21:11:37.000000000 +0100
+++ new/src/cblas_dspr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double  alpha, const double  *X,
                 const int incX, const double  *Y, const int incY, double  *A)
 {
@@ -36,7 +36,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dspr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dspr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dspr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dspr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -63,7 +63,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_dspr2(F77_UL, &F77_N, &alpha, X, &F77_incX, Y, &F77_incY,  A); 
-   } else cblas_xerbla(1, "cblas_dspr2", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_dspr2", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dspr.c new/src/cblas_dspr.c
--- old/src/cblas_dspr.c	1999-03-15 21:11:36.000000000 +0100
+++ new/src/cblas_dspr.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const double *X,
                 const int incX, double *Ap)
 {
@@ -36,7 +36,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dspr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dspr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dspr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dspr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -63,7 +63,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_dspr(F77_UL, &F77_N, &alpha, X, &F77_incX, Ap); 
-   } else cblas_xerbla(1, "cblas_dspr", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_dspr", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dswap.c new/src/cblas_dswap.c
--- old/src/cblas_dswap.c	1999-03-13 04:44:35.000000000 +0100
+++ new/src/cblas_dswap.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dswap( const int N, double *X, const int incX, double *Y,
+void inner_cblas_dswap( const int N, double *X, const int incX, double *Y,
                        const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_dsymm.c new/src/cblas_dsymm.c
--- old/src/cblas_dsymm.c	1999-03-15 21:11:38.000000000 +0100
+++ new/src/cblas_dsymm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const double alpha, const double  *A, const int lda,
                  const double  *B, const int ldb, const double beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsymm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dsymm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_dsymm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dsymm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_dsymm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dsymm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -85,7 +85,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_dsymm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dsymm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       F77_dsymm(F77_SD, F77_UL, &F77_N, &F77_M, &alpha, A, &F77_lda, B,
                  &F77_ldb, &beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_dsymm","Illegal Order setting, %d\n", Order); 
+   else inner_cblas_xerbla(1, "cblas_dsymm","Illegal Order setting, %d\n", Order); 
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dsymv.c new/src/cblas_dsymv.c
--- old/src/cblas_dsymv.c	1999-03-15 21:11:39.000000000 +0100
+++ new/src/cblas_dsymv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsymv(const enum CBLAS_ORDER order,
+void inner_cblas_dsymv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const double alpha, const double  *A, const int lda,
                  const double  *X, const int incX, const double beta,
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsymv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsymv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dsymv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dsymv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       F77_dsymv(F77_UL, &F77_N, &alpha, 
                      A ,&F77_lda, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_dsymv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dsymv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dsyr2.c new/src/cblas_dsyr2.c
--- old/src/cblas_dsyr2.c	1999-03-15 21:11:40.000000000 +0100
+++ new/src/cblas_dsyr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double  alpha, const double  *X,
                 const int incX, const double  *Y, const int incY, double  *A,
                 const int lda)
@@ -40,7 +40,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsyr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsyr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       #endif  
       F77_dsyr2(F77_UL, &F77_N, &alpha, X, &F77_incX, Y, &F77_incY,  A, 
                     &F77_lda); 
-   } else cblas_xerbla(1, "cblas_dsyr2", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_dsyr2", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dsyr2k.c new/src/cblas_dsyr2k.c
--- old/src/cblas_dsyr2k.c	1999-03-15 21:11:41.000000000 +0100
+++ new/src/cblas_dsyr2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const double alpha, const double  *A, const int lda,
                   const double  *B, const int ldb, const double beta,
@@ -46,7 +46,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyr2k","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dsyr2k","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyr2k","Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_dsyr2k","Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyr2k","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dsyr2k","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -88,7 +88,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyr2k","Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_dsyr2k","Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       F77_dsyr2k(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda, B, 
                 &F77_ldb, &beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_dsyr2k","Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_dsyr2k","Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dsyr.c new/src/cblas_dsyr.c
--- old/src/cblas_dsyr.c	1999-03-15 21:11:39.000000000 +0100
+++ new/src/cblas_dsyr.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double  alpha, const double  *X,
                 const int incX, double  *A, const int lda)
 {
@@ -37,7 +37,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsyr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_dsyr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -64,7 +64,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_dsyr(F77_UL, &F77_N, &alpha, X, &F77_incX, A, &F77_lda); 
-   } else cblas_xerbla(1, "cblas_dsyr", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_dsyr", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dsyrk.c new/src/cblas_dsyrk.c
--- old/src/cblas_dsyrk.c	1999-03-15 21:11:42.000000000 +0100
+++ new/src/cblas_dsyrk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const double alpha, const double  *A, const int lda,
                  const double beta, double  *C, const int ldc)
@@ -44,7 +44,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_dsyrk","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dsyrk","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyrk","Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_dsyrk","Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyrk","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dsyrk","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -86,7 +86,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_dsyrk","Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_dsyrk","Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       F77_dsyrk(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda,
                      &beta, C, &F77_ldc);
    } 
-   else cblas_xerbla(1, "cblas_dsyrk","Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_dsyrk","Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtbmv.c new/src/cblas_dtbmv.c
--- old/src/cblas_dtbmv.c	1999-03-15 21:11:43.000000000 +0100
+++ new/src/cblas_dtbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const double  *A, const int lda,
                  double  *X, const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtbmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtbmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(4, "cblas_dtbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -116,7 +116,7 @@
                       &F77_incX);
 
    }
-   else cblas_xerbla(1, "cblas_dtbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dtbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
 }
diff -ru old/src/cblas_dtbsv.c new/src/cblas_dtbsv.c
--- old/src/cblas_dtbsv.c	1999-03-15 21:11:44.000000000 +0100
+++ new/src/cblas_dtbsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const double  *A, const int lda,
                  double  *X, const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -115,7 +115,7 @@
       F77_dtbsv( F77_UL, F77_TA, F77_DI, &F77_N, &F77_K, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_dtbsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dtbsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtpmv.c new/src/cblas_dtpmv.c
--- old/src/cblas_dtpmv.c	1999-03-15 21:11:45.000000000 +0100
+++ new/src/cblas_dtpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double  *Ap, double  *X, const int incX)
 {
@@ -38,7 +38,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -48,7 +48,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -87,7 +87,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -97,7 +97,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -110,7 +110,7 @@
 
       F77_dtpmv( F77_UL, F77_TA, F77_DI, &F77_N, Ap, X,&F77_incX);
    }
-   else cblas_xerbla(1, "cblas_dtpmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dtpmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtpsv.c new/src/cblas_dtpsv.c
--- old/src/cblas_dtpsv.c	1999-03-15 21:11:46.000000000 +0100
+++ new/src/cblas_dtpsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double  *Ap, double  *X, const int incX)
 {
@@ -38,7 +38,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -48,7 +48,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -87,7 +87,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -97,7 +97,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -111,7 +111,7 @@
       F77_dtpsv( F77_UL, F77_TA, F77_DI, &F77_N, Ap, X,&F77_incX);
 
    }
-   else cblas_xerbla(1, "cblas_dtpsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dtpsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtrmm.c new/src/cblas_dtrmm.c
--- old/src/cblas_dtrmm.c	1999-03-15 21:11:47.000000000 +0100
+++ new/src/cblas_dtrmm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const  enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const double alpha, const double  *A, const int lda,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrmm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dtrmm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrmm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dtrmm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrmm","Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_dtrmm","Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_dtrmm","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_dtrmm","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -96,7 +96,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrmm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dtrmm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -106,7 +106,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrmm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dtrmm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -117,7 +117,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrmm","Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_dtrmm","Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -127,7 +127,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_dtrmm","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_dtrmm","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -141,7 +141,7 @@
       #endif
       F77_dtrmm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, &alpha, A, &F77_lda, B, &F77_ldb);
    } 
-   else cblas_xerbla(1, "cblas_dtrmm", "Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_dtrmm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtrmv.c new/src/cblas_dtrmv.c
--- old/src/cblas_dtrmv.c	1999-03-15 21:11:48.000000000 +0100
+++ new/src/cblas_dtrmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double  *A, const int lda,
                  double  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -93,7 +93,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -103,7 +103,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -115,7 +115,7 @@
       #endif
       F77_dtrmv( F77_UL, F77_TA, F77_DI, &F77_N, A, &F77_lda, X,
                       &F77_incX);
-   } else cblas_xerbla(1, "cblas_dtrmv", "Illegal order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_dtrmv", "Illegal order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtrsm.c new/src/cblas_dtrsm.c
--- old/src/cblas_dtrsm.c	1999-03-15 21:11:49.000000000 +0100
+++ new/src/cblas_dtrsm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const double alpha, const double  *A, const int lda,
@@ -46,7 +46,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrsm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dtrsm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrsm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dtrsm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -66,7 +66,7 @@
       else if ( TransA == CblasNoTrans  ) TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrsm","Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_dtrsm","Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if ( Diag == CblasNonUnit) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_dtrsm","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_dtrsm","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrsm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_dtrsm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -109,7 +109,7 @@
       else if ( Uplo == CblasLower) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrsm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_dtrsm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -120,7 +120,7 @@
       else if ( TransA == CblasNoTrans  ) TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrsm","Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_dtrsm","Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -130,7 +130,7 @@
       else if ( Diag == CblasNonUnit) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_dtrsm","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_dtrsm","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -146,7 +146,7 @@
       F77_dtrsm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, &alpha, A, 
                &F77_lda, B, &F77_ldb);
    } 
-   else cblas_xerbla(1, "cblas_dtrsm","Illegal Order setting, %d\n", Order);
+   else inner_cblas_xerbla(1, "cblas_dtrsm","Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dtrsv.c new/src/cblas_dtrsv.c
--- old/src/cblas_dtrsv.c	1999-03-15 21:11:50.000000000 +0100
+++ new/src/cblas_dtrsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double  *A, const int lda, double  *X,
                  const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_dtrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_dtrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_dtrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_dtrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_dtrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_dtrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       F77_dtrsv( F77_UL, F77_TA, F77_DI, &F77_N, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_dtrsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_dtrsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_dzasum.c new/src/cblas_dzasum.c
--- old/src/cblas_dzasum.c	1999-03-13 04:44:50.000000000 +0100
+++ new/src/cblas_dzasum.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double cblas_dzasum( const int N, const void *X, const int incX) 
+double inner_cblas_dzasum( const int N, const void *X, const int incX) 
 {
    double asum;
 #ifdef F77_INT
diff -ru old/src/cblas_dznrm2.c new/src/cblas_dznrm2.c
--- old/src/cblas_dznrm2.c	1999-03-13 04:44:51.000000000 +0100
+++ new/src/cblas_dznrm2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-double cblas_dznrm2( const int N, const void *X, const int incX) 
+double inner_cblas_dznrm2( const int N, const void *X, const int incX) 
 {
    double nrm2;
 #ifdef F77_INT
diff -ru old/src/cblas_f77.h new/src/cblas_f77.h
--- old/src/cblas_f77.h	2003-02-23 21:56:45.000000000 +0100
+++ new/src/cblas_f77.h	2010-09-03 13:49:42.000000000 +0200
@@ -3,7 +3,7 @@
  * Written by Keita Teranishi
  *
  * Updated by Jeff Horner
- * Merged cblas_f77.h and cblas_fortran_header.h
+ * Merged inner_cblas_f77.h and inner_cblas_fortran_header.h
  */
 
 #ifndef CBLAS_F77_H
diff -ru old/src/cblas.h new/src/cblas.h
--- old/src/cblas.h	1999-03-13 04:43:40.000000000 +0100
+++ new/src/cblas.h	2010-09-03 13:49:42.000000000 +0200
@@ -18,52 +18,52 @@
  * Prototypes for level 1 BLAS functions (complex are recast as routines)
  * ===========================================================================
  */
-float  cblas_sdsdot(const int N, const float alpha, const float *X,
+float  inner_cblas_sdsdot(const int N, const float alpha, const float *X,
                     const int incX, const float *Y, const int incY);
-double cblas_dsdot(const int N, const float *X, const int incX, const float *Y,
+double inner_cblas_dsdot(const int N, const float *X, const int incX, const float *Y,
                    const int incY);
-float  cblas_sdot(const int N, const float  *X, const int incX,
+float  inner_cblas_sdot(const int N, const float  *X, const int incX,
                   const float  *Y, const int incY);
-double cblas_ddot(const int N, const double *X, const int incX,
+double inner_cblas_ddot(const int N, const double *X, const int incX,
                   const double *Y, const int incY);
 
 /*
  * Functions having prefixes Z and C only
  */
-void   cblas_cdotu_sub(const int N, const void *X, const int incX,
+void   inner_cblas_cdotu_sub(const int N, const void *X, const int incX,
                        const void *Y, const int incY, void *dotu);
-void   cblas_cdotc_sub(const int N, const void *X, const int incX,
+void   inner_cblas_cdotc_sub(const int N, const void *X, const int incX,
                        const void *Y, const int incY, void *dotc);
 
-void   cblas_zdotu_sub(const int N, const void *X, const int incX,
+void   inner_cblas_zdotu_sub(const int N, const void *X, const int incX,
                        const void *Y, const int incY, void *dotu);
-void   cblas_zdotc_sub(const int N, const void *X, const int incX,
+void   inner_cblas_zdotc_sub(const int N, const void *X, const int incX,
                        const void *Y, const int incY, void *dotc);
 
 
 /*
  * Functions having prefixes S D SC DZ
  */
-float  cblas_snrm2(const int N, const float *X, const int incX);
-float  cblas_sasum(const int N, const float *X, const int incX);
+float  inner_cblas_snrm2(const int N, const float *X, const int incX);
+float  inner_cblas_sasum(const int N, const float *X, const int incX);
 
-double cblas_dnrm2(const int N, const double *X, const int incX);
-double cblas_dasum(const int N, const double *X, const int incX);
+double inner_cblas_dnrm2(const int N, const double *X, const int incX);
+double inner_cblas_dasum(const int N, const double *X, const int incX);
 
-float  cblas_scnrm2(const int N, const void *X, const int incX);
-float  cblas_scasum(const int N, const void *X, const int incX);
+float  inner_cblas_scnrm2(const int N, const void *X, const int incX);
+float  inner_cblas_scasum(const int N, const void *X, const int incX);
 
-double cblas_dznrm2(const int N, const void *X, const int incX);
-double cblas_dzasum(const int N, const void *X, const int incX);
+double inner_cblas_dznrm2(const int N, const void *X, const int incX);
+double inner_cblas_dzasum(const int N, const void *X, const int incX);
 
 
 /*
  * Functions having standard 4 prefixes (S D C Z)
  */
-CBLAS_INDEX cblas_isamax(const int N, const float  *X, const int incX);
-CBLAS_INDEX cblas_idamax(const int N, const double *X, const int incX);
-CBLAS_INDEX cblas_icamax(const int N, const void   *X, const int incX);
-CBLAS_INDEX cblas_izamax(const int N, const void   *X, const int incX);
+CBLAS_INDEX inner_cblas_isamax(const int N, const float  *X, const int incX);
+CBLAS_INDEX inner_cblas_idamax(const int N, const double *X, const int incX);
+CBLAS_INDEX inner_cblas_icamax(const int N, const void   *X, const int incX);
+CBLAS_INDEX inner_cblas_izamax(const int N, const void   *X, const int incX);
 
 /*
  * ===========================================================================
@@ -74,62 +74,62 @@
 /* 
  * Routines with standard 4 prefixes (s, d, c, z)
  */
-void cblas_sswap(const int N, float *X, const int incX, 
+void inner_cblas_sswap(const int N, float *X, const int incX, 
                  float *Y, const int incY);
-void cblas_scopy(const int N, const float *X, const int incX, 
+void inner_cblas_scopy(const int N, const float *X, const int incX, 
                  float *Y, const int incY);
-void cblas_saxpy(const int N, const float alpha, const float *X,
+void inner_cblas_saxpy(const int N, const float alpha, const float *X,
                  const int incX, float *Y, const int incY);
 
-void cblas_dswap(const int N, double *X, const int incX, 
+void inner_cblas_dswap(const int N, double *X, const int incX, 
                  double *Y, const int incY);
-void cblas_dcopy(const int N, const double *X, const int incX, 
+void inner_cblas_dcopy(const int N, const double *X, const int incX, 
                  double *Y, const int incY);
-void cblas_daxpy(const int N, const double alpha, const double *X,
+void inner_cblas_daxpy(const int N, const double alpha, const double *X,
                  const int incX, double *Y, const int incY);
 
-void cblas_cswap(const int N, void *X, const int incX, 
+void inner_cblas_cswap(const int N, void *X, const int incX, 
                  void *Y, const int incY);
-void cblas_ccopy(const int N, const void *X, const int incX, 
+void inner_cblas_ccopy(const int N, const void *X, const int incX, 
                  void *Y, const int incY);
-void cblas_caxpy(const int N, const void *alpha, const void *X,
+void inner_cblas_caxpy(const int N, const void *alpha, const void *X,
                  const int incX, void *Y, const int incY);
 
-void cblas_zswap(const int N, void *X, const int incX, 
+void inner_cblas_zswap(const int N, void *X, const int incX, 
                  void *Y, const int incY);
-void cblas_zcopy(const int N, const void *X, const int incX, 
+void inner_cblas_zcopy(const int N, const void *X, const int incX, 
                  void *Y, const int incY);
-void cblas_zaxpy(const int N, const void *alpha, const void *X,
+void inner_cblas_zaxpy(const int N, const void *alpha, const void *X,
                  const int incX, void *Y, const int incY);
 
 
 /* 
  * Routines with S and D prefix only
  */
-void cblas_srotg(float *a, float *b, float *c, float *s);
-void cblas_srotmg(float *d1, float *d2, float *b1, const float b2, float *P);
-void cblas_srot(const int N, float *X, const int incX,
+void inner_cblas_srotg(float *a, float *b, float *c, float *s);
+void inner_cblas_srotmg(float *d1, float *d2, float *b1, const float b2, float *P);
+void inner_cblas_srot(const int N, float *X, const int incX,
                 float *Y, const int incY, const float c, const float s);
-void cblas_srotm(const int N, float *X, const int incX,
+void inner_cblas_srotm(const int N, float *X, const int incX,
                 float *Y, const int incY, const float *P);
 
-void cblas_drotg(double *a, double *b, double *c, double *s);
-void cblas_drotmg(double *d1, double *d2, double *b1, const double b2, double *P);
-void cblas_drot(const int N, double *X, const int incX,
+void inner_cblas_drotg(double *a, double *b, double *c, double *s);
+void inner_cblas_drotmg(double *d1, double *d2, double *b1, const double b2, double *P);
+void inner_cblas_drot(const int N, double *X, const int incX,
                 double *Y, const int incY, const double c, const double  s);
-void cblas_drotm(const int N, double *X, const int incX,
+void inner_cblas_drotm(const int N, double *X, const int incX,
                 double *Y, const int incY, const double *P);
 
 
 /* 
  * Routines with S D C Z CS and ZD prefixes
  */
-void cblas_sscal(const int N, const float alpha, float *X, const int incX);
-void cblas_dscal(const int N, const double alpha, double *X, const int incX);
-void cblas_cscal(const int N, const void *alpha, void *X, const int incX);
-void cblas_zscal(const int N, const void *alpha, void *X, const int incX);
-void cblas_csscal(const int N, const float alpha, void *X, const int incX);
-void cblas_zdscal(const int N, const double alpha, void *X, const int incX);
+void inner_cblas_sscal(const int N, const float alpha, float *X, const int incX);
+void inner_cblas_dscal(const int N, const double alpha, double *X, const int incX);
+void inner_cblas_cscal(const int N, const void *alpha, void *X, const int incX);
+void inner_cblas_zscal(const int N, const void *alpha, void *X, const int incX);
+void inner_cblas_csscal(const int N, const float alpha, void *X, const int incX);
+void inner_cblas_zdscal(const int N, const double alpha, void *X, const int incX);
 
 /*
  * ===========================================================================
@@ -140,135 +140,135 @@
 /* 
  * Routines with standard 4 prefixes (S, D, C, Z)
  */
-void cblas_sgemv(const enum CBLAS_ORDER order,
+void inner_cblas_sgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const float alpha, const float *A, const int lda,
                  const float *X, const int incX, const float beta,
                  float *Y, const int incY);
-void cblas_sgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_sgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU, const float alpha,
                  const float *A, const int lda, const float *X,
                  const int incX, const float beta, float *Y, const int incY);
-void cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float *A, const int lda, 
                  float *X, const int incX);
-void cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const float *A, const int lda, 
                  float *X, const int incX);
-void cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float *Ap, float *X, const int incX);
-void cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float *A, const int lda, float *X,
                  const int incX);
-void cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const float *A, const int lda,
                  float *X, const int incX);
-void cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float *Ap, float *X, const int incX);
 
-void cblas_dgemv(const enum CBLAS_ORDER order,
+void inner_cblas_dgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const double alpha, const double *A, const int lda,
                  const double *X, const int incX, const double beta,
                  double *Y, const int incY);
-void cblas_dgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_dgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU, const double alpha,
                  const double *A, const int lda, const double *X,
                  const int incX, const double beta, double *Y, const int incY);
-void cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double *A, const int lda, 
                  double *X, const int incX);
-void cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const double *A, const int lda, 
                  double *X, const int incX);
-void cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double *Ap, double *X, const int incX);
-void cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double *A, const int lda, double *X,
                  const int incX);
-void cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const double *A, const int lda,
                  double *X, const int incX);
-void cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dtpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const double *Ap, double *X, const int incX);
 
-void cblas_cgemv(const enum CBLAS_ORDER order,
+void inner_cblas_cgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *X, const int incX, const void *beta,
                  void *Y, const int incY);
-void cblas_cgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_cgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU, const void *alpha,
                  const void *A, const int lda, const void *X,
                  const int incX, const void *beta, void *Y, const int incY);
-void cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *A, const int lda, 
                  void *X, const int incX);
-void cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void *A, const int lda, 
                  void *X, const int incX);
-void cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *Ap, void *X, const int incX);
-void cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *A, const int lda, void *X,
                  const int incX);
-void cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void *A, const int lda,
                  void *X, const int incX);
-void cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ctpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *Ap, void *X, const int incX);
 
-void cblas_zgemv(const enum CBLAS_ORDER order,
+void inner_cblas_zgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *X, const int incX, const void *beta,
                  void *Y, const int incY);
-void cblas_zgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_zgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU, const void *alpha,
                  const void *A, const int lda, const void *X,
                  const int incX, const void *beta, void *Y, const int incY);
-void cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *A, const int lda, 
                  void *X, const int incX);
-void cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void *A, const int lda, 
                  void *X, const int incX);
-void cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *Ap, void *X, const int incX);
-void cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *A, const int lda, void *X,
                  const int incX);
-void cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void *A, const int lda,
                  void *X, const int incX);
-void cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void *Ap, void *X, const int incX);
 
@@ -276,61 +276,61 @@
 /* 
  * Routines with S and D prefixes only
  */
-void cblas_ssymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const float alpha, const float *A,
                  const int lda, const float *X, const int incX,
                  const float beta, float *Y, const int incY);
-void cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const int K, const float alpha, const float *A,
                  const int lda, const float *X, const int incX,
                  const float beta, float *Y, const int incY);
-void cblas_sspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_sspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const float alpha, const float *Ap,
                  const float *X, const int incX,
                  const float beta, float *Y, const int incY);
-void cblas_sger(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_sger(const enum CBLAS_ORDER order, const int M, const int N,
                 const float alpha, const float *X, const int incX,
                 const float *Y, const int incY, float *A, const int lda);
-void cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const float *X,
                 const int incX, float *A, const int lda);
-void cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const float *X,
                 const int incX, float *Ap);
-void cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const float *X,
                 const int incX, const float *Y, const int incY, float *A,
                 const int lda);
-void cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const float *X,
                 const int incX, const float *Y, const int incY, float *A);
 
-void cblas_dsymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsymv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const double alpha, const double *A,
                  const int lda, const double *X, const int incX,
                  const double beta, double *Y, const int incY);
-void cblas_dsbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const int K, const double alpha, const double *A,
                  const int lda, const double *X, const int incX,
                  const double beta, double *Y, const int incY);
-void cblas_dspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dspmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const double alpha, const double *Ap,
                  const double *X, const int incX,
                  const double beta, double *Y, const int incY);
-void cblas_dger(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_dger(const enum CBLAS_ORDER order, const int M, const int N,
                 const double alpha, const double *X, const int incX,
                 const double *Y, const int incY, double *A, const int lda);
-void cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const double *X,
                 const int incX, double *A, const int lda);
-void cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const double *X,
                 const int incX, double *Ap);
-void cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const double *X,
                 const int incX, const double *Y, const int incY, double *A,
                 const int lda);
-void cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const double *X,
                 const int incX, const double *Y, const int incY, double *A);
 
@@ -338,65 +338,65 @@
 /* 
  * Routines with C and Z prefixes only
  */
-void cblas_chemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *A,
                  const int lda, const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_chbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const int K, const void *alpha, const void *A,
                  const int lda, const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_chpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *Ap,
                  const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_cgeru(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_cgeru(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda);
-void cblas_cgerc(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_cgerc(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda);
-void cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const void *X, const int incX,
                 void *A, const int lda);
-void cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_chpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float alpha, const void *X,
                 const int incX, void *A);
-void cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
+void inner_cblas_cher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
                 const void *alpha, const void *X, const int incX,
                 const void *Y, const int incY, void *A, const int lda);
-void cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
+void inner_cblas_chpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
                 const void *alpha, const void *X, const int incX,
                 const void *Y, const int incY, void *Ap);
 
-void cblas_zhemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhemv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *A,
                  const int lda, const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_zhbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const int K, const void *alpha, const void *A,
                  const int lda, const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_zhpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *Ap,
                  const void *X, const int incX,
                  const void *beta, void *Y, const int incY);
-void cblas_zgeru(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_zgeru(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda);
-void cblas_zgerc(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_zgerc(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda);
-void cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const void *X, const int incX,
                 void *A, const int lda);
-void cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const void *X,
                 const int incX, void *A);
-void cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
+void inner_cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
                 const void *alpha, const void *X, const int incX,
                 const void *Y, const int incY, void *A, const int lda);
-void cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
+void inner_cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo, const int N,
                 const void *alpha, const void *X, const int incX,
                 const void *Y, const int incY, void *Ap);
 
@@ -409,121 +409,121 @@
 /* 
  * Routines with standard 4 prefixes (S, D, C, Z)
  */
-void cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const float alpha, const float *A,
                  const int lda, const float *B, const int ldb,
                  const float beta, float *C, const int ldc);
-void cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const float alpha, const float *A, const int lda,
                  const float *B, const int ldb, const float beta,
                  float *C, const int ldc);
-void cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const float alpha, const float *A, const int lda,
                  const float beta, float *C, const int ldc);
-void cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const float alpha, const float *A, const int lda,
                   const float *B, const int ldb, const float beta,
                   float *C, const int ldc);
-void cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const float alpha, const float *A, const int lda,
                  float *B, const int ldb);
-void cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const float alpha, const float *A, const int lda,
                  float *B, const int ldb);
 
-void cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_dgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const double alpha, const double *A,
                  const int lda, const double *B, const int ldb,
                  const double beta, double *C, const int ldc);
-void cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const double alpha, const double *A, const int lda,
                  const double *B, const int ldb, const double beta,
                  double *C, const int ldc);
-void cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const double alpha, const double *A, const int lda,
                  const double beta, double *C, const int ldc);
-void cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_dsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const double alpha, const double *A, const int lda,
                   const double *B, const int ldb, const double beta,
                   double *C, const int ldc);
-void cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dtrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const double alpha, const double *A, const int lda,
                  double *B, const int ldb);
-void cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_dtrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const double alpha, const double *A, const int lda,
                  double *B, const int ldb);
 
-void cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_cgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const void *alpha, const void *A,
                  const int lda, const void *B, const int ldb,
                  const void *beta, void *C, const int ldc);
-void cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_csymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
                  void *C, const int ldc);
-void cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_csyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const void *alpha, const void *A, const int lda,
                  const void *beta, void *C, const int ldc);
-void cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_csyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const void *beta,
                   void *C, const int ldc);
-void cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ctrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  void *B, const int ldb);
-void cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ctrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  void *B, const int ldb);
 
-void cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const void *alpha, const void *A,
                  const int lda, const void *B, const int ldb,
                  const void *beta, void *C, const int ldc);
-void cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
                  void *C, const int ldc);
-void cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const void *alpha, const void *A, const int lda,
                  const void *beta, void *C, const int ldc);
-void cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const void *beta,
                   void *C, const int ldc);
-void cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  void *B, const int ldb);
-void cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
@@ -533,35 +533,35 @@
 /* 
  * Routines with prefixes C and Z only
  */
-void cblas_chemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_chemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
                  void *C, const int ldc);
-void cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const float alpha, const void *A, const int lda,
                  const float beta, void *C, const int ldc);
-void cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_cher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const float beta,
                   void *C, const int ldc);
 
-void cblas_zhemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_zhemm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
                  void *C, const int ldc);
-void cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const double alpha, const void *A, const int lda,
                  const double beta, void *C, const int ldc);
-void cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const double beta,
                   void *C, const int ldc);
 
-void cblas_xerbla(int p, const char *rout, const char *form, ...);
+void inner_cblas_xerbla(int p, const char *rout, const char *form, ...);
 #endif
diff -ru old/src/cblas_icamax.c new/src/cblas_icamax.c
--- old/src/cblas_icamax.c	2003-02-23 21:03:06.000000000 +0100
+++ new/src/cblas_icamax.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-CBLAS_INDEX cblas_icamax( const int N, const void *X, const int incX)
+CBLAS_INDEX inner_cblas_icamax( const int N, const void *X, const int incX)
 {
    int iamax;
 #ifdef F77_INT
diff -ru old/src/cblas_idamax.c new/src/cblas_idamax.c
--- old/src/cblas_idamax.c	2003-02-23 21:03:06.000000000 +0100
+++ new/src/cblas_idamax.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-CBLAS_INDEX cblas_idamax( const int N, const double *X, const int incX)
+CBLAS_INDEX inner_cblas_idamax( const int N, const double *X, const int incX)
 {
    int iamax;
 #ifdef F77_INT
diff -ru old/src/cblas_isamax.c new/src/cblas_isamax.c
--- old/src/cblas_isamax.c	2003-02-23 21:03:06.000000000 +0100
+++ new/src/cblas_isamax.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-CBLAS_INDEX cblas_isamax( const int N, const float *X, const int incX)
+CBLAS_INDEX inner_cblas_isamax( const int N, const float *X, const int incX)
 {
    int iamax;
 #ifdef F77_INT
diff -ru old/src/cblas_izamax.c new/src/cblas_izamax.c
--- old/src/cblas_izamax.c	2003-02-23 21:05:19.000000000 +0100
+++ new/src/cblas_izamax.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-CBLAS_INDEX cblas_izamax( const int N, const void *X, const int incX)
+CBLAS_INDEX inner_cblas_izamax( const int N, const void *X, const int incX)
 {
    int iamax;
 #ifdef F77_INT
diff -ru old/src/cblas_sasum.c new/src/cblas_sasum.c
--- old/src/cblas_sasum.c	1999-03-13 04:44:58.000000000 +0100
+++ new/src/cblas_sasum.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_sasum( const int N, const float *X, const int incX) 
+float inner_cblas_sasum( const int N, const float *X, const int incX) 
 {
    float asum;
 #ifdef F77_INT
diff -ru old/src/cblas_saxpy.c new/src/cblas_saxpy.c
--- old/src/cblas_saxpy.c	1999-03-13 04:44:59.000000000 +0100
+++ new/src/cblas_saxpy.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_saxpy( const int N, const float alpha, const float *X,
+void inner_cblas_saxpy( const int N, const float alpha, const float *X,
                        const int incX, float *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_scasum.c new/src/cblas_scasum.c
--- old/src/cblas_scasum.c	1999-03-13 04:45:00.000000000 +0100
+++ new/src/cblas_scasum.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_scasum( const int N, const void *X, const int incX) 
+float inner_cblas_scasum( const int N, const void *X, const int incX) 
 {
    float asum;
 #ifdef F77_INT
diff -ru old/src/cblas_scnrm2.c new/src/cblas_scnrm2.c
--- old/src/cblas_scnrm2.c	1999-03-13 04:45:01.000000000 +0100
+++ new/src/cblas_scnrm2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_scnrm2( const int N, const void *X, const int incX) 
+float inner_cblas_scnrm2( const int N, const void *X, const int incX) 
 {
    float nrm2;
 #ifdef F77_INT
diff -ru old/src/cblas_scopy.c new/src/cblas_scopy.c
--- old/src/cblas_scopy.c	1999-03-13 04:45:02.000000000 +0100
+++ new/src/cblas_scopy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_scopy( const int N, const float *X,
+void inner_cblas_scopy( const int N, const float *X,
                       const int incX, float *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_sdot.c new/src/cblas_sdot.c
--- old/src/cblas_sdot.c	1999-03-13 04:45:03.000000000 +0100
+++ new/src/cblas_sdot.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_sdot( const int N, const float *X,
+float inner_cblas_sdot( const int N, const float *X,
                       const int incX, const float *Y, const int incY)
 {
    float dot;
diff -ru old/src/cblas_sdsdot.c new/src/cblas_sdsdot.c
--- old/src/cblas_sdsdot.c	1999-03-13 04:45:04.000000000 +0100
+++ new/src/cblas_sdsdot.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_sdsdot( const int N, const float alpha, const float *X,
+float inner_cblas_sdsdot( const int N, const float alpha, const float *X,
                       const int incX, const float *Y, const int incY)
 {
    float dot;
diff -ru old/src/cblas_sgbmv.c new/src/cblas_sgbmv.c
--- old/src/cblas_sgbmv.c	1999-03-15 21:11:52.000000000 +0100
+++ new/src/cblas_sgbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_sgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU,
                  const float alpha, const float *A, const int lda,
@@ -46,7 +46,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_sgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_sgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(2, "cblas_sgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_sgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       F77_sgbmv(F77_TA, &F77_N, &F77_M, &F77_KU, &F77_KL, &alpha, 
                      A ,&F77_lda, X, &F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_sgbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_sgbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_sgemm.c new/src/cblas_sgemm.c
--- old/src/cblas_sgemm.c	1999-03-15 21:11:53.000000000 +0100
+++ new/src/cblas_sgemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_sgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const float alpha, const float  *A,
                  const int lda, const float  *B, const int ldb,
@@ -46,7 +46,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_sgemm", 
+         inner_cblas_xerbla(2, "cblas_sgemm", 
                        "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -58,7 +58,7 @@
       else if ( TransB == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(3, "cblas_sgemm", 
+         inner_cblas_xerbla(3, "cblas_sgemm", 
                        "Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -79,7 +79,7 @@
       else if ( TransA == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(2, "cblas_sgemm", 
+         inner_cblas_xerbla(2, "cblas_sgemm", 
                        "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -90,7 +90,7 @@
       else if ( TransB == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_sgemm", 
+         inner_cblas_xerbla(2, "cblas_sgemm", 
                        "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -103,7 +103,7 @@
 
       F77_sgemm(F77_TA, F77_TB, &F77_N, &F77_M, &F77_K, &alpha, B, &F77_ldb, A, &F77_lda, &beta, C, &F77_ldc);
    } else  
-     cblas_xerbla(1, "cblas_sgemm",
+     inner_cblas_xerbla(1, "cblas_sgemm",
                      "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
diff -ru old/src/cblas_sgemv.c new/src/cblas_sgemv.c
--- old/src/cblas_sgemv.c	1999-03-15 21:11:54.000000000 +0100
+++ new/src/cblas_sgemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sgemv(const enum CBLAS_ORDER order,
+void inner_cblas_sgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const float alpha, const float  *A, const int lda,
                  const float  *X, const int incX, const float beta,
@@ -42,7 +42,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_sgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_sgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
       }
@@ -60,7 +60,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(2, "cblas_sgemv", "Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_sgemv", "Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -71,7 +71,7 @@
       F77_sgemv(F77_TA, &F77_N, &F77_M, &alpha, A, &F77_lda, X,
                 &F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_sgemv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_sgemv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_sger.c new/src/cblas_sger.c
--- old/src/cblas_sger.c	1999-03-15 21:11:55.000000000 +0100
+++ new/src/cblas_sger.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sger(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_sger(const enum CBLAS_ORDER order, const int M, const int N,
                 const float  alpha, const float  *X, const int incX,
                 const float  *Y, const int incY, float  *A, const int lda)
 {
@@ -39,7 +39,7 @@
       F77_sger( &F77_N, &F77_M, &alpha, Y, &F77_incY, X, &F77_incX, A, 
         &F77_lda);
    }
-   else cblas_xerbla(1, "cblas_sger", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_sger", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_snrm2.c new/src/cblas_snrm2.c
--- old/src/cblas_snrm2.c	1999-03-13 04:45:09.000000000 +0100
+++ new/src/cblas_snrm2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-float cblas_snrm2( const int N, const float *X, const int incX) 
+float inner_cblas_snrm2( const int N, const float *X, const int incX) 
 {
    float nrm2;
 #ifdef F77_INT
diff -ru old/src/cblas_srot.c new/src/cblas_srot.c
--- old/src/cblas_srot.c	1999-03-13 04:45:10.000000000 +0100
+++ new/src/cblas_srot.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_srot( const int N, float *X, const int incX, float *Y, 
+void inner_cblas_srot( const int N, float *X, const int incX, float *Y, 
                       const int incY, const float  c, const float  s)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_srotg.c new/src/cblas_srotg.c
--- old/src/cblas_srotg.c	1999-03-11 22:46:48.000000000 +0100
+++ new/src/cblas_srotg.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_srotg(  float *a, float *b, float *c, float *s)
+void inner_cblas_srotg(  float *a, float *b, float *c, float *s)
 {
    F77_srotg(a,b,c,s);    
 }
diff -ru old/src/cblas_srotm.c new/src/cblas_srotm.c
--- old/src/cblas_srotm.c	1999-03-13 04:45:12.000000000 +0100
+++ new/src/cblas_srotm.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_srotm( const int N, float *X, const int incX, float *Y, 
+void inner_cblas_srotm( const int N, float *X, const int incX, float *Y, 
                        const int incY, const float *P)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_srotmg.c new/src/cblas_srotmg.c
--- old/src/cblas_srotmg.c	1999-03-13 04:45:12.000000000 +0100
+++ new/src/cblas_srotmg.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_srotmg( float *d1, float *d2, float *b1, 
+void inner_cblas_srotmg( float *d1, float *d2, float *b1, 
                         const float b2, float *p)
 {
    F77_srotmg(d1,d2,b1,&b2,p);
diff -ru old/src/cblas_ssbmv.c new/src/cblas_ssbmv.c
--- old/src/cblas_ssbmv.c	1999-03-15 21:11:56.000000000 +0100
+++ new/src/cblas_ssbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
            const int N, const int K, const float alpha, const float *A,
            const int lda, const float *X, const int incX,
            const float beta, float *Y, const int incY)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssbmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssbmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ssbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ssbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       F77_ssbmv(F77_UL, &F77_N, &F77_K, &alpha, A, &F77_lda, X,
       &F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_ssbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ssbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_sscal.c new/src/cblas_sscal.c
--- old/src/cblas_sscal.c	1999-03-13 04:45:15.000000000 +0100
+++ new/src/cblas_sscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sscal( const int N, const float alpha, float *X, 
+void inner_cblas_sscal( const int N, const float alpha, float *X, 
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_sspmv.c new/src/cblas_sspmv.c
--- old/src/cblas_sspmv.c	1999-03-15 21:11:57.000000000 +0100
+++ new/src/cblas_sspmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sspmv(const enum CBLAS_ORDER order,
+void inner_cblas_sspmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const float alpha, const float  *AP,
                  const float  *X, const int incX, const float beta,
@@ -38,7 +38,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_sspmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_sspmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -56,7 +56,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_sspmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_sspmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -67,7 +67,7 @@
       F77_sspmv(F77_UL, &F77_N, &alpha, 
                      AP, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_sspmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_sspmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
 }
diff -ru old/src/cblas_sspr2.c new/src/cblas_sspr2.c
--- old/src/cblas_sspr2.c	1999-03-15 21:11:59.000000000 +0100
+++ new/src/cblas_sspr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_sspr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float  alpha, const float  *X,
                 const int incX, const float  *Y, const int incY, float  *A)
 {
@@ -38,7 +38,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_sspr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_sspr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -56,7 +56,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_sspr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_sspr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_sspr2(F77_UL, &F77_N, &alpha, X, &F77_incX, Y, &F77_incY,  A); 
-   } else cblas_xerbla(1, "cblas_sspr2", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_sspr2", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
 }
diff -ru old/src/cblas_sspr.c new/src/cblas_sspr.c
--- old/src/cblas_sspr.c	1999-03-15 21:11:58.000000000 +0100
+++ new/src/cblas_sspr.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_sspr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const  float alpha, const float *X,
                 const int incX, float *Ap)
 {
@@ -38,7 +38,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_sspr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_sspr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -56,7 +56,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_sspr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_sspr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_sspr(F77_UL, &F77_N, &alpha, X, &F77_incX, Ap); 
-   } else cblas_xerbla(1, "cblas_sspr", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_sspr", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_sswap.c new/src/cblas_sswap.c
--- old/src/cblas_sswap.c	1999-03-13 04:45:19.000000000 +0100
+++ new/src/cblas_sswap.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_sswap( const int N, float *X, const int incX, float *Y,
+void inner_cblas_sswap( const int N, float *X, const int incX, float *Y,
                        const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_ssymm.c new/src/cblas_ssymm.c
--- old/src/cblas_ssymm.c	1999-03-15 21:12:00.000000000 +0100
+++ new/src/cblas_ssymm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ssymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const float alpha, const float  *A, const int lda,
                  const float  *B, const int ldb, const float beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssymm", 
+         inner_cblas_xerbla(2, "cblas_ssymm", 
                        "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -56,7 +56,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_ssymm", 
+         inner_cblas_xerbla(3, "cblas_ssymm", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -76,7 +76,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_ssymm", 
+         inner_cblas_xerbla(2, "cblas_ssymm", 
                        "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -87,7 +87,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ssymm", 
+         inner_cblas_xerbla(3, "cblas_ssymm", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -100,7 +100,7 @@
       #endif
 
       F77_ssymm(F77_SD, F77_UL, &F77_N, &F77_M, &alpha, A, &F77_lda, B, &F77_ldb, &beta, C, &F77_ldc);
-   } else  cblas_xerbla(1, "cblas_ssymm",
+   } else  inner_cblas_xerbla(1, "cblas_ssymm",
                      "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
diff -ru old/src/cblas_ssymv.c new/src/cblas_ssymv.c
--- old/src/cblas_ssymv.c	1999-03-15 21:12:00.000000000 +0100
+++ new/src/cblas_ssymv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssymv(const enum CBLAS_ORDER order,
+void inner_cblas_ssymv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const float alpha, const float  *A, const int lda,
                  const float  *X, const int incX, const float beta,
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssymv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssymv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ssymv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ssymv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       F77_ssymv(F77_UL, &F77_N, &alpha, 
                      A ,&F77_lda, X,&F77_incX, &beta, Y, &F77_incY);
    }
-   else cblas_xerbla(1, "cblas_ssymv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ssymv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ssyr2.c new/src/cblas_ssyr2.c
--- old/src/cblas_ssyr2.c	1999-03-15 21:12:02.000000000 +0100
+++ new/src/cblas_ssyr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float  alpha, const float  *X,
                 const int incX, const float  *Y, const int incY, float  *A,
                 const int lda)
@@ -40,7 +40,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssyr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssyr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -69,7 +69,7 @@
       #endif  
       F77_ssyr2(F77_UL, &F77_N, &alpha, X, &F77_incX, Y, &F77_incY,  A, 
                     &F77_lda); 
-   } else cblas_xerbla(1, "cblas_ssyr2", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_ssyr2", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ssyr2k.c new/src/cblas_ssyr2k.c
--- old/src/cblas_ssyr2k.c	1999-03-15 21:12:03.000000000 +0100
+++ new/src/cblas_ssyr2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const float alpha, const float  *A, const int lda,
                   const float  *B, const int ldb, const float beta,
@@ -46,7 +46,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyr2k", 
+         inner_cblas_xerbla(2, "cblas_ssyr2k", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -58,7 +58,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyr2k", 
+         inner_cblas_xerbla(3, "cblas_ssyr2k", 
                        "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -79,7 +79,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyr2k", 
+         inner_cblas_xerbla(3, "cblas_ssyr2k", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -90,7 +90,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyr2k", 
+         inner_cblas_xerbla(3, "cblas_ssyr2k", 
                        "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -103,7 +103,7 @@
       #endif
 
       F77_ssyr2k(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda, B, &F77_ldb, &beta, C, &F77_ldc);
-   } else  cblas_xerbla(1, "cblas_ssyr2k",
+   } else  inner_cblas_xerbla(1, "cblas_ssyr2k",
                      "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
diff -ru old/src/cblas_ssyr.c new/src/cblas_ssyr.c
--- old/src/cblas_ssyr.c	1999-03-15 21:12:01.000000000 +0100
+++ new/src/cblas_ssyr.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const float  alpha, const float  *X,
                 const int incX, float  *A, const int lda)
 {
@@ -36,7 +36,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssyr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if (Uplo == CblasUpper) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_ssyr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -63,7 +63,7 @@
          F77_UL = C2F_CHAR(&UL);
       #endif  
       F77_ssyr(F77_UL, &F77_N, &alpha, X, &F77_incX, A, &F77_lda); 
-   } else cblas_xerbla(1, "cblas_ssyr", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_ssyr", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ssyrk.c new/src/cblas_ssyrk.c
--- old/src/cblas_ssyrk.c	1999-03-15 21:12:04.000000000 +0100
+++ new/src/cblas_ssyrk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ssyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const float alpha, const float  *A, const int lda,
                  const float beta, float  *C, const int ldc)
@@ -44,7 +44,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ssyrk", 
+         inner_cblas_xerbla(2, "cblas_ssyrk", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -56,7 +56,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyrk", 
+         inner_cblas_xerbla(3, "cblas_ssyrk", 
                        "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -77,7 +77,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyrk", 
+         inner_cblas_xerbla(3, "cblas_ssyrk", 
                        "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -88,7 +88,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_ssyrk", 
+         inner_cblas_xerbla(3, "cblas_ssyrk", 
                        "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
@@ -101,7 +101,7 @@
       #endif
 
       F77_ssyrk(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda, &beta, C, &F77_ldc);
-   } else  cblas_xerbla(1, "cblas_ssyrk",
+   } else  inner_cblas_xerbla(1, "cblas_ssyrk",
                      "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
diff -ru old/src/cblas_stbmv.c new/src/cblas_stbmv.c
--- old/src/cblas_stbmv.c	1999-03-15 21:12:05.000000000 +0100
+++ new/src/cblas_stbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
 #include "cblas.h"
 #include "cblas_f77.h"
 
-void cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const float  *A, const int lda,
                  float  *X, const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_stbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stbmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stbmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_stbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(4, "cblas_stbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -115,7 +115,7 @@
       F77_stbmv( F77_UL, F77_TA, F77_DI, &F77_N, &F77_K, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_stbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_stbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_stbsv.c new/src/cblas_stbsv.c
--- old/src/cblas_stbsv.c	1999-03-15 21:12:06.000000000 +0100
+++ new/src/cblas_stbsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const float  *A, const int lda,
                  float  *X, const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_stbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_stbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_stbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_stbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -115,7 +115,7 @@
       F77_stbsv( F77_UL, F77_TA, F77_DI, &F77_N, &F77_K, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_stbsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_stbsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_stpmv.c new/src/cblas_stpmv.c
--- old/src/cblas_stpmv.c	1999-03-15 21:12:08.000000000 +0100
+++ new/src/cblas_stpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float  *Ap, float  *X, const int incX)
 {
@@ -39,7 +39,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_stpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -49,7 +49,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_stpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -77,7 +77,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_stpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -88,7 +88,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_stpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -98,7 +98,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -111,7 +111,7 @@
 
       F77_stpmv( F77_UL, F77_TA, F77_DI, &F77_N, Ap, X,&F77_incX);
    }
-   else cblas_xerbla(1, "cblas_stpmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_stpmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_stpsv.c new/src/cblas_stpsv.c
--- old/src/cblas_stpsv.c	1999-03-15 21:12:09.000000000 +0100
+++ new/src/cblas_stpsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_stpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float  *Ap, float  *X, const int incX)
 {
@@ -38,7 +38,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_stpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -48,7 +48,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_stpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_stpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_stpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -87,7 +87,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_stpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_stpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -97,7 +97,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_stpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_stpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -111,7 +111,7 @@
       F77_stpsv( F77_UL, F77_TA, F77_DI, &F77_N, Ap, X,&F77_incX);
 
    }
-   else cblas_xerbla(1, "cblas_stpsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_stpsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_strmm.c new/src/cblas_strmm.c
--- old/src/cblas_strmm.c	1999-03-15 21:12:10.000000000 +0100
+++ new/src/cblas_strmm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_strmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const  enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const float alpha, const float *A, const int lda,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_strmm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_strmm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_strmm","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_strmm","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_strmm","Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_strmm","Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_strmm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_strmm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -96,7 +96,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_strmm","Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_strmm","Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -106,7 +106,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_strmm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_strmm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -117,7 +117,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_strmm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_strmm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -127,7 +127,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_strmm","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_strmm","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -141,7 +141,7 @@
       F77_strmm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, &alpha, A,
       &F77_lda, B, &F77_ldb);
    } 
-   else  cblas_xerbla(1, "cblas_strmm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_strmm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_strmv.c new/src/cblas_strmv.c
--- old/src/cblas_strmv.c	1999-03-15 21:12:11.000000000 +0100
+++ new/src/cblas_strmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_strmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float  *A, const int lda,
                  float  *X, const int incX)
@@ -42,7 +42,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_strmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_strmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -52,7 +52,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_strmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_strmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -61,7 +61,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_strmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_strmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -81,7 +81,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_strmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_strmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -92,7 +92,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_strmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_strmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_strmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_strmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -115,7 +115,7 @@
       F77_strmv( F77_UL, F77_TA, F77_DI, &F77_N, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_strmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_strmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_strsm.c new/src/cblas_strsm.c
--- old/src/cblas_strsm.c	1999-03-15 21:12:12.000000000 +0100
+++ new/src/cblas_strsm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_strsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const float alpha, const float  *A, const int lda,
@@ -46,7 +46,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_strsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_strsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_strsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_strsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_strsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_strsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -74,7 +74,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_strsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_strsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -94,7 +94,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_strsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_strsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -103,7 +103,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_strsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_strsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -113,7 +113,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_strsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_strsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -122,7 +122,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_strsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_strsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -136,7 +136,7 @@
 
       F77_strsm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, &alpha, A, &F77_lda, B, &F77_ldb);
    } 
-   else  cblas_xerbla(1, "cblas_strsm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_strsm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_strsv.c new/src/cblas_strsv.c
--- old/src/cblas_strsv.c	1999-03-15 21:12:13.000000000 +0100
+++ new/src/cblas_strsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_strsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const float  *A, const int lda, float  *X,
                  const int incX)
@@ -41,7 +41,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_strsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_strsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_strsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_strsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_strsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_strsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_strsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_strsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -91,7 +91,7 @@
       else if (TransA == CblasConjTrans) TA = 'N';
       else 
       {
-         cblas_xerbla(3, "cblas_strsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_strsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_strsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_strsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       F77_strsv( F77_UL, F77_TA, F77_DI, &F77_N, A, &F77_lda, X,
                       &F77_incX);
    }
-   else cblas_xerbla(1, "cblas_strsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_strsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_xerbla.c new/src/cblas_xerbla.c
--- old/src/cblas_xerbla.c	1999-03-15 21:12:14.000000000 +0100
+++ new/src/cblas_xerbla.c	2010-09-03 13:49:38.000000000 +0200
@@ -5,7 +5,7 @@
 #include "cblas.h"
 #include "cblas_f77.h"
 
-void cblas_xerbla(int info, const char *rout, const char *form, ...)
+void inner_cblas_xerbla(int info, const char *rout, const char *form, ...)
 {
    extern RowMajorStrg;
    va_list argptr;
diff -ru old/src/cblas_zaxpy.c new/src/cblas_zaxpy.c
--- old/src/cblas_zaxpy.c	1999-03-13 04:45:35.000000000 +0100
+++ new/src/cblas_zaxpy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zaxpy( const int N, const void *alpha, const void *X,
+void inner_cblas_zaxpy( const int N, const void *alpha, const void *X,
                        const int incX, void *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zcopy.c new/src/cblas_zcopy.c
--- old/src/cblas_zcopy.c	1999-03-13 04:45:36.000000000 +0100
+++ new/src/cblas_zcopy.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zcopy( const int N, const void *X,
+void inner_cblas_zcopy( const int N, const void *X,
                       const int incX, void *Y, const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zdotc_sub.c new/src/cblas_zdotc_sub.c
--- old/src/cblas_zdotc_sub.c	1999-03-13 04:45:37.000000000 +0100
+++ new/src/cblas_zdotc_sub.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zdotc_sub( const int N, const void *X, const int incX,
+void inner_cblas_zdotc_sub( const int N, const void *X, const int incX,
                     const void *Y, const int incY, void *dotc)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zdotu_sub.c new/src/cblas_zdotu_sub.c
--- old/src/cblas_zdotu_sub.c	1999-03-13 04:45:38.000000000 +0100
+++ new/src/cblas_zdotu_sub.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zdotu_sub( const int N, const void *X, const int incX,
+void inner_cblas_zdotu_sub( const int N, const void *X, const int incX,
                       const void *Y, const int incY, void *dotu)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zdscal.c new/src/cblas_zdscal.c
--- old/src/cblas_zdscal.c	1999-03-13 04:45:39.000000000 +0100
+++ new/src/cblas_zdscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zdscal( const int N, const double alpha, void  *X,
+void inner_cblas_zdscal( const int N, const double alpha, void  *X,
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zgbmv.c new/src/cblas_zgbmv.c
--- old/src/cblas_zgbmv.c	1999-03-15 21:12:15.000000000 +0100
+++ new/src/cblas_zgbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zgbmv(const enum CBLAS_ORDER order,
+void inner_cblas_zgbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const int KL, const int KU,
                  const void *alpha, const void  *A, const int lda,
@@ -51,7 +51,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_zgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -131,7 +131,7 @@
       }
       else 
       {
-         cblas_xerbla(2, "cblas_zgbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -159,7 +159,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_zgbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_zgbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zgemm.c new/src/cblas_zgemm.c
--- old/src/cblas_zgemm.c	1999-03-15 21:12:16.000000000 +0100
+++ new/src/cblas_zgemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
+void inner_cblas_zgemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_TRANSPOSE TransB, const int M, const int N,
                  const int K, const void *alpha, const void  *A,
                  const int lda, const void  *B, const int ldb,
@@ -47,7 +47,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_zgemm","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgemm","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if ( TransB == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(3, "cblas_zgemm","Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(3, "cblas_zgemm","Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -79,7 +79,7 @@
       else if ( TransA == CblasNoTrans )   TB='N';
       else 
       {
-         cblas_xerbla(2, "cblas_zgemm","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgemm","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -89,7 +89,7 @@
       else if ( TransB == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(2, "cblas_zgemm","Illegal TransB setting, %d\n", TransB);
+         inner_cblas_xerbla(2, "cblas_zgemm","Illegal TransB setting, %d\n", TransB);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
       F77_zgemm(F77_TA, F77_TB, &F77_N, &F77_M, &F77_K, alpha, B,
                   &F77_ldb, A, &F77_lda, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zgemm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zgemm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zgemv.c new/src/cblas_zgemv.c
--- old/src/cblas_zgemv.c	1999-03-15 21:12:16.000000000 +0100
+++ new/src/cblas_zgemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zgemv(const enum CBLAS_ORDER order,
+void inner_cblas_zgemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_TRANSPOSE TransA, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
                  const void  *X, const int incX, const void *beta,
@@ -49,7 +49,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(2, "cblas_zgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -128,7 +128,7 @@
       }
       else 
       {
-         cblas_xerbla(2, "cblas_zgemv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(2, "cblas_zgemv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -157,7 +157,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_zgemv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_zgemv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zgerc.c new/src/cblas_zgerc.c
--- old/src/cblas_zgerc.c	1999-03-15 21:12:17.000000000 +0100
+++ new/src/cblas_zgerc.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zgerc(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_zgerc(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -77,7 +77,7 @@
       if(Y!=y)
          free(y);
 
-   } else cblas_xerbla(1, "cblas_zgerc", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_zgerc", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zgeru.c new/src/cblas_zgeru.c
--- old/src/cblas_zgeru.c	1999-03-15 21:12:18.000000000 +0100
+++ new/src/cblas_zgeru.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zgeru(const enum CBLAS_ORDER order, const int M, const int N,
+void inner_cblas_zgeru(const enum CBLAS_ORDER order, const int M, const int N,
                  const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -37,7 +37,7 @@
       F77_zgeru( &F77_N, &F77_M, alpha, Y, &F77_incY, X, &F77_incX, A, 
                       &F77_lda);
    }
-   else cblas_xerbla(1, "cblas_zgeru", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_zgeru", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zhbmv.c new/src/cblas_zhbmv.c
--- old/src/cblas_zhbmv.c	1999-03-15 21:12:19.000000000 +0100
+++ new/src/cblas_zhbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include "cblas_f77.h"
 #include <stdio.h>
 #include <stdlib.h>
-void cblas_zhbmv(const enum CBLAS_ORDER order,
+void inner_cblas_zhbmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo,const int N,const int K,
                  const void *alpha, const void  *A, const int lda,
                  const void  *X, const int incX, const void *beta,
@@ -46,7 +46,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhbmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zhbmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -120,7 +120,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zhbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -133,7 +133,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_zhbmv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zhbmv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zhemm.c new/src/cblas_zhemm.c
--- old/src/cblas_zhemm.c	1999-03-15 21:12:20.000000000 +0100
+++ new/src/cblas_zhemm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zhemm(const enum CBLAS_ORDER Order, const  enum CBLAS_SIDE Side,
+void inner_cblas_zhemm(const enum CBLAS_ORDER Order, const  enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *B, const int ldb, const void *beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zhemm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_zhemm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_zhemm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zhemm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_zhemm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_zhemm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -85,7 +85,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_zhemm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zhemm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       F77_zhemm(F77_SD, F77_UL, &F77_N, &F77_M, alpha, A,
                  &F77_lda, B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zhemm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zhemm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zhemv.c new/src/cblas_zhemv.c
--- old/src/cblas_zhemv.c	1999-03-15 21:12:21.000000000 +0100
+++ new/src/cblas_zhemv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zhemv(const enum CBLAS_ORDER order,
+void inner_cblas_zhemv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo, const int N,
                  const void *alpha, const void *A, const int lda,
                  const void *X, const int incX, const void *beta,
@@ -46,7 +46,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_zhemv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zhemv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -121,7 +121,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhemv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zhemv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -134,7 +134,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_zhemv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zhemv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zher2.c new/src/cblas_zher2.c
--- old/src/cblas_zher2.c	1999-03-15 21:12:23.000000000 +0100
+++ new/src/cblas_zher2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zher2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const int N, const void *alpha, const void *X, const int incX,
                  const void *Y, const int incY, void *A, const int lda)
 {
@@ -43,7 +43,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zher2", "Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zher2", "Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zher2", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zher2", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -137,7 +137,7 @@
    } 
    else 
    {
-      cblas_xerbla(1, "cblas_zher2", "Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zher2", "Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zher2k.c new/src/cblas_zher2k.c
--- old/src/cblas_zher2k.c	1999-03-15 21:12:24.000000000 +0100
+++ new/src/cblas_zher2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zher2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void *A, const int lda,
                   const void *B, const int ldb, const double beta,
@@ -49,7 +49,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zher2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zher2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -60,7 +60,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_zher2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zher2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -80,7 +80,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(2, "cblas_zher2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zher2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -90,7 +90,7 @@
       else if ( Trans == CblasNoTrans )   TR='C';
       else 
       {
-         cblas_xerbla(3, "cblas_zher2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zher2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -103,7 +103,7 @@
       ALPHA[0]= *alp;
       ALPHA[1]= -alp[1];
       F77_zher2k(F77_UL,F77_TR, &F77_N, &F77_K, ALPHA, A, &F77_lda, B, &F77_ldb, &beta, C, &F77_ldc);
-   } else  cblas_xerbla(1, "cblas_zher2k", "Illegal Order setting, %d\n", Order);
+   } else  inner_cblas_xerbla(1, "cblas_zher2k", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zher.c new/src/cblas_zher.c
--- old/src/cblas_zher.c	1999-03-15 21:12:22.000000000 +0100
+++ new/src/cblas_zher.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zher(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const void *X, const int incX
                 ,void *A, const int lda)
 {
@@ -41,7 +41,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zher","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zher","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zher","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zher","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       }
       else x = (double *) X;
       F77_zher(F77_UL, &F77_N, &alpha, x, &F77_incX, A, &F77_lda);
-   } else cblas_xerbla(1, "cblas_zher", "Illegal Order setting, %d\n", order);
+   } else inner_cblas_xerbla(1, "cblas_zher", "Illegal Order setting, %d\n", order);
    if(X!=x) 
       free(x);
    
diff -ru old/src/cblas_zherk.c new/src/cblas_zherk.c
--- old/src/cblas_zherk.c	1999-03-15 21:12:25.000000000 +0100
+++ new/src/cblas_zherk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zherk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const double alpha, const void *A, const int lda,
                  const double beta, void *C, const int ldc)
@@ -43,7 +43,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zherk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zherk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_zherk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zherk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -74,7 +74,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_zherk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zherk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -84,7 +84,7 @@
       else if ( Trans == CblasNoTrans )   TR='C';
       else 
       {
-         cblas_xerbla(3, "cblas_zherk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zherk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -98,7 +98,7 @@
       F77_zherk(F77_UL, F77_TR, &F77_N, &F77_K, &alpha, A, &F77_lda,
                 &beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zherk", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zherk", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zhpmv.c new/src/cblas_zhpmv.c
--- old/src/cblas_zhpmv.c	1999-03-15 21:12:26.000000000 +0100
+++ new/src/cblas_zhpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zhpmv(const enum CBLAS_ORDER order,
+void inner_cblas_zhpmv(const enum CBLAS_ORDER order,
                  const enum CBLAS_UPLO Uplo,const int N,
                  const void *alpha, const void  *AP,
                  const void  *X, const int incX, const void *beta,
@@ -44,7 +44,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpmv","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zhpmv","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -119,7 +119,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpmv","Illegal Uplo setting, %d\n", Uplo );
+         inner_cblas_xerbla(2, "cblas_zhpmv","Illegal Uplo setting, %d\n", Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -133,7 +133,7 @@
    }
    else 
    {
-      cblas_xerbla(1, "cblas_zhpmv","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zhpmv","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zhpr2.c new/src/cblas_zhpr2.c
--- old/src/cblas_zhpr2.c	1999-03-15 21:12:28.000000000 +0100
+++ new/src/cblas_zhpr2.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhpr2(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                       const int N,const void *alpha, const void *X, 
                       const int incX,const void *Y, const int incY, void *Ap)
 
@@ -43,7 +43,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpr2","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zhpr2","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -61,7 +61,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpr2","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zhpr2","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -135,7 +135,7 @@
    } 
    else 
    {
-      cblas_xerbla(1, "cblas_zhpr2","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zhpr2","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zhpr.c new/src/cblas_zhpr.c
--- old/src/cblas_zhpr.c	1999-03-15 21:12:27.000000000 +0100
+++ new/src/cblas_zhpr.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 #include <stdlib.h>
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zhpr(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                 const int N, const double alpha, const void *X,
                 const int incX, void *A)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasUpper) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpr","Illegal Uplo setting, %d\n",Uplo );
+         inner_cblas_xerbla(2, "cblas_zhpr","Illegal Uplo setting, %d\n",Uplo );
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -58,7 +58,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_zhpr","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zhpr","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -102,7 +102,7 @@
 
    } else 
    {
-      cblas_xerbla(1, "cblas_zhpr","Illegal Order setting, %d\n", order);
+      inner_cblas_xerbla(1, "cblas_zhpr","Illegal Order setting, %d\n", order);
       CBLAS_CallFromC = 0;
       RowMajorStrg = 0;
       return;
diff -ru old/src/cblas_zscal.c new/src/cblas_zscal.c
--- old/src/cblas_zscal.c	1999-03-13 04:45:56.000000000 +0100
+++ new/src/cblas_zscal.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zscal( const int N, const void *alpha, void *X, 
+void inner_cblas_zscal( const int N, const void *alpha, void *X, 
                        const int incX)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zswap.c new/src/cblas_zswap.c
--- old/src/cblas_zswap.c	1999-03-13 04:45:57.000000000 +0100
+++ new/src/cblas_zswap.c	2010-09-03 13:49:38.000000000 +0200
@@ -8,7 +8,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zswap( const int N, void  *X, const int incX, void  *Y,
+void inner_cblas_zswap( const int N, void  *X, const int incX, void  *Y,
                        const int incY)
 {
 #ifdef F77_INT
diff -ru old/src/cblas_zsymm.c new/src/cblas_zsymm.c
--- old/src/cblas_zsymm.c	1999-03-15 21:12:29.000000000 +0100
+++ new/src/cblas_zsymm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_zsymm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
                  const void  *B, const int ldb, const void *beta,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zsymm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_zsymm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_zsymm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zsymm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_zsymm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_zsymm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -85,7 +85,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_zsymm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zsymm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -99,7 +99,7 @@
       F77_zsymm(F77_SD, F77_UL, &F77_N, &F77_M, alpha, A, &F77_lda,
                      B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zsymm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zsymm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zsyr2k.c new/src/cblas_zsyr2k.c
--- old/src/cblas_zsyr2k.c	1999-03-15 21:12:30.000000000 +0100
+++ new/src/cblas_zsyr2k.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zsyr2k(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                   const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                   const void *alpha, const void  *A, const int lda,
                   const void  *B, const int ldb, const void *beta,
@@ -46,7 +46,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zsyr2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zsyr2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -57,7 +57,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyr2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zsyr2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyr2k", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zsyr2k", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -88,7 +88,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyr2k", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zsyr2k", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -101,7 +101,7 @@
 
       F77_zsyr2k(F77_UL, F77_TR, &F77_N, &F77_K, alpha, A, &F77_lda, B, &F77_ldb, beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zsyr2k", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zsyr2k", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_zsyrk.c new/src/cblas_zsyrk.c
--- old/src/cblas_zsyrk.c	1999-03-15 21:12:31.000000000 +0100
+++ new/src/cblas_zsyrk.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_zsyrk(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE Trans, const int N, const int K,
                  const void *alpha, const void  *A, const int lda,
                  const void *beta, void  *C, const int ldc)
@@ -44,7 +44,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(2, "cblas_zsyrk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_zsyrk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -55,7 +55,7 @@
       else if ( Trans == CblasNoTrans )   TR='N';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyrk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zsyrk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -76,7 +76,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyrk", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_zsyrk", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -86,7 +86,7 @@
       else if ( Trans == CblasNoTrans )   TR='T';
       else 
       {
-         cblas_xerbla(3, "cblas_zsyrk", "Illegal Trans setting, %d\n", Trans);
+         inner_cblas_xerbla(3, "cblas_zsyrk", "Illegal Trans setting, %d\n", Trans);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       F77_zsyrk(F77_UL, F77_TR, &F77_N, &F77_K, alpha, A, &F77_lda,
                      beta, C, &F77_ldc);
    } 
-   else  cblas_xerbla(1, "cblas_zsyrk", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_zsyrk", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztbmv.c new/src/cblas_ztbmv.c
--- old/src/cblas_ztbmv.c	1999-03-15 21:12:32.000000000 +0100
+++ new/src/cblas_ztbmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztbmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztbmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztbmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztbmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztbmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(4, "cblas_ztbmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -151,7 +151,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztbmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztbmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztbsv.c new/src/cblas_ztbsv.c
--- old/src/cblas_ztbsv.c	1999-03-15 21:12:33.000000000 +0100
+++ new/src/cblas_ztbsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztbsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const int K, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztbsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztbsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -118,7 +118,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztbsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztbsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -128,7 +128,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztbsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztbsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -155,7 +155,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztbsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztbsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztpmv.c new/src/cblas_ztpmv.c
--- old/src/cblas_ztpmv.c	1999-03-15 21:12:34.000000000 +0100
+++ new/src/cblas_ztpmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztpmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *Ap, void  *X, const int incX)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -50,7 +50,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztpmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztpmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -110,7 +110,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztpmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztpmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -120,7 +120,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztpmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztpmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -145,7 +145,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztpmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztpmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztpsv.c new/src/cblas_ztpsv.c
--- old/src/cblas_ztpsv.c	1999-03-15 21:12:35.000000000 +0100
+++ new/src/cblas_ztpsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztpsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *Ap, void  *X, const int incX)
 {
@@ -40,7 +40,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -50,7 +50,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -59,7 +59,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -78,7 +78,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztpsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztpsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztpsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztpsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztpsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztpsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -150,7 +150,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztpsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztpsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztrmm.c new/src/cblas_ztrmm.c
--- old/src/cblas_ztrmm.c	1999-03-15 21:12:36.000000000 +0100
+++ new/src/cblas_ztrmm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ztrmm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const  enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
@@ -45,7 +45,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrmm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ztrmm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -54,7 +54,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrmm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ztrmm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -65,7 +65,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrmm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ztrmm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -75,7 +75,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ztrmm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ztrmm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -96,7 +96,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrmm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ztrmm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -106,7 +106,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrmm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ztrmm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -117,7 +117,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrmm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ztrmm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -127,7 +127,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ztrmm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ztrmm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -142,7 +142,7 @@
 
       F77_ztrmm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, alpha, A, &F77_lda, B, &F77_ldb);
    } 
-   else  cblas_xerbla(1, "cblas_ztrmm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_ztrmm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztrmv.c new/src/cblas_ztrmv.c
--- old/src/cblas_ztrmv.c	1999-03-15 21:12:37.000000000 +0100
+++ new/src/cblas_ztrmv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztrmv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *A, const int lda,
                  void  *X, const int incX)
@@ -43,7 +43,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -53,7 +53,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -62,7 +62,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -82,7 +82,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrmv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztrmv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztrmv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztrmv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrmv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztrmv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -149,7 +149,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztrmv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztrmv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztrsm.c new/src/cblas_ztrsm.c
--- old/src/cblas_ztrsm.c	1999-03-15 21:12:38.000000000 +0100
+++ new/src/cblas_ztrsm.c	2010-09-03 13:49:38.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
+void inner_cblas_ztrsm(const enum CBLAS_ORDER Order, const enum CBLAS_SIDE Side,
                  const enum CBLAS_UPLO Uplo, const enum CBLAS_TRANSPOSE TransA,
                  const enum CBLAS_DIAG Diag, const int M, const int N,
                  const void *alpha, const void  *A, const int lda,
@@ -46,7 +46,7 @@
       else if ( Side == CblasLeft ) SD='L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ztrsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -56,7 +56,7 @@
       else if ( Uplo == CblasLower ) UL='L';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ztrsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -67,7 +67,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ztrsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -77,7 +77,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ztrsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ztrsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -100,7 +100,7 @@
       else if ( Side == CblasLeft ) SD='R';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrsm", "Illegal Side setting, %d\n", Side);
+         inner_cblas_xerbla(2, "cblas_ztrsm", "Illegal Side setting, %d\n", Side);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -110,7 +110,7 @@
       else if ( Uplo == CblasLower ) UL='U';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrsm", "Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(3, "cblas_ztrsm", "Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -121,7 +121,7 @@
       else if ( TransA == CblasNoTrans )   TA='N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrsm", "Illegal Trans setting, %d\n", TransA);
+         inner_cblas_xerbla(4, "cblas_ztrsm", "Illegal Trans setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -131,7 +131,7 @@
       else if ( Diag == CblasNonUnit ) DI='N';
       else 
       {
-         cblas_xerbla(5, "cblas_ztrsm", "Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(5, "cblas_ztrsm", "Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -148,7 +148,7 @@
       F77_ztrsm(F77_SD, F77_UL, F77_TA, F77_DI, &F77_N, &F77_M, alpha, A,
                 &F77_lda, B, &F77_ldb);
    } 
-   else  cblas_xerbla(1, "cblas_ztrsm", "Illegal Order setting, %d\n", Order);
+   else  inner_cblas_xerbla(1, "cblas_ztrsm", "Illegal Order setting, %d\n", Order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/cblas_ztrsv.c new/src/cblas_ztrsv.c
--- old/src/cblas_ztrsv.c	1999-03-15 21:12:39.000000000 +0100
+++ new/src/cblas_ztrsv.c	2010-09-03 13:49:38.000000000 +0200
@@ -7,7 +7,7 @@
  */
 #include "cblas.h"
 #include "cblas_f77.h"
-void cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
+void inner_cblas_ztrsv(const enum CBLAS_ORDER order, const enum CBLAS_UPLO Uplo,
                  const enum CBLAS_TRANSPOSE TransA, const enum CBLAS_DIAG Diag,
                  const int N, const void  *A, const int lda, void  *X,
                  const int incX)
@@ -42,7 +42,7 @@
       else if (Uplo == CblasLower) UL = 'L';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -52,7 +52,7 @@
       else if (TransA == CblasConjTrans) TA = 'C';
       else 
       {
-         cblas_xerbla(3, "cblas_ztrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -61,7 +61,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -81,7 +81,7 @@
       else if (Uplo == CblasLower) UL = 'U';
       else 
       {
-         cblas_xerbla(2, "cblas_ztrsv","Illegal Uplo setting, %d\n", Uplo);
+         inner_cblas_xerbla(2, "cblas_ztrsv","Illegal Uplo setting, %d\n", Uplo);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -114,7 +114,7 @@
       }
       else 
       {
-         cblas_xerbla(3, "cblas_ztrsv","Illegal TransA setting, %d\n", TransA);
+         inner_cblas_xerbla(3, "cblas_ztrsv","Illegal TransA setting, %d\n", TransA);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -124,7 +124,7 @@
       else if (Diag == CblasNonUnit) DI = 'N';
       else 
       {
-         cblas_xerbla(4, "cblas_ztrsv","Illegal Diag setting, %d\n", Diag);
+         inner_cblas_xerbla(4, "cblas_ztrsv","Illegal Diag setting, %d\n", Diag);
          CBLAS_CallFromC = 0;
          RowMajorStrg = 0;
          return;
@@ -149,7 +149,7 @@
          }
       }
    }
-   else cblas_xerbla(1, "cblas_ztrsv", "Illegal Order setting, %d\n", order);
+   else inner_cblas_xerbla(1, "cblas_ztrsv", "Illegal Order setting, %d\n", order);
    CBLAS_CallFromC = 0;
    RowMajorStrg = 0;
    return;
diff -ru old/src/Makefile new/src/Makefile
--- old/src/Makefile	1999-03-15 21:11:03.000000000 +0100
+++ new/src/Makefile	2010-08-19 14:30:13.000000000 +0200
@@ -234,6 +234,7 @@
 all: $(alev)  
 	$(ARCH) $(ARCHFLAGS)  $(CBLIB) $(alev) 
 	$(RANLIB) $(CBLIB)
+	$(CC) -shared -L../../BLAS *.o -lblas -o ../libcblas_inner.so
 
 
 .SUFFIXES: .o .c .f
diff -ru old/src/xerbla.c new/src/xerbla.c
--- old/src/xerbla.c	1999-03-15 21:12:40.000000000 +0100
+++ new/src/xerbla.c	2010-09-03 13:49:38.000000000 +0200
@@ -37,7 +37,7 @@
    {
       for(i=0; i != XerblaStrLen; i++) rout[i+6] = tolower(srname[i]);
       rout[XerblaStrLen+6] = '\0';
-      cblas_xerbla(*info+1,rout,"");
+      inner_cblas_xerbla(*info+1,rout,"");
    }
    else
    {
